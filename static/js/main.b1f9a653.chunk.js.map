{"version":3,"sources":["sortingAlgorithms/mergeSort.js","sortingAlgorithms/quickSort.js","index.js","sortingAlgorithms/bubbleSort.js","sortingAlgorithms/bubbleSortEffeceint.js","sortingAlgorithms/insertionSort.js","sortingAlgorithms/selectionSortAlternate.js","sortingAlgorithms/selectionSort.js"],"names":["auxillary","traverse","mergeSort","array","start","end","middle","first","second","flength","slength","auxillaryArray","slice","push","shift","i","concat","merge","anims","quicksort","l","r","mid","j","pivot","length","partition","App","props","state","x","PRIMARY_COLOR","SECONDARY_COLOR","TERNARY_COLOR","this","resetArray","min","max","Math","random","parseInt","randomNumberIn","setState","enableButtons","items","styles","width","padding","margin","background","height","className","style","key","able","document","getElementsByClassName","pointerEvents","getElementById","color","disableButtons","ANIMATION_SPEED","flag","getBubbleSortAnims","lines","firstBarindex","secondBarindex","firstBarStyle","secondBarStyle","setTimeout","getBubbleSortEffecientAnims","value","hole","getInsertionSortAnims","type","val1","val2","getSelectionSortAlternateAnims","minidx","console","log","getSelectionSortAnims","current","currentBarStyle","prev","previousBarStyle","index","getMergeSortAnims","yStyle","y","xStyle","Number","MAX_SAFE_INTEGER","pop","getQuickSortAnims","firstBarIndex","secondBarIndex","getItems","Helmet","onClick","bubbleSort","bubbleSortEffecient","insertionSort","selectionSort","selectionSortAlternate","quickSort","axis","xmin","onChange","id","React","Component","ReactDOM","render"],"mappings":"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","file":"static/js/main.b1f9a653.chunk.js","sourcesContent":["var auxillary=[];\r\nvar traverse=[];\r\n\r\nfunction merge(array,start,middle,end){\r\n    var auxillaryArray=[];\r\n    var first,second,flength,slength;\r\n    var flengthstart=0,slengthstart=0;\r\n    [first,second]=[array.slice(start,middle+1),array.slice(middle+1,end+1)];\r\n    [flength,slength]=[middle-start+1,end-middle];\r\n    [flengthstart,slengthstart]=[middle-start+1,end-middle];\r\n    while(flength>0 && slength>0){\r\n        if(first[0]<second[0]){\r\n            auxillaryArray.push(first.shift());\r\n            flength-=1;\r\n        }\r\n        else{\r\n            auxillaryArray.push(second.shift());\r\n            slength-=1;\r\n        }  \r\n       // traverse.push([start+flengthstart-flength,end-slength+1]);\r\n        //traverse.push([start+flengthstart-flength,end-slength+1]);\r\n        //console.log(start+flengthstart-flength,end-slength+1,array[start+flengthstart-flength],array[end-slength+1]);\r\n    }\r\n    for(let i=0;i<middle;i++){\r\n        traverse.push([middle+i,start+i]);\r\n        traverse.push([middle+i,start+i]);\r\n    }\r\n    if(flength>0){\r\n        auxillaryArray=auxillaryArray.concat(first);\r\n    }\r\n    if(slength>0){\r\n        auxillaryArray=auxillaryArray.concat(second);\r\n    }\r\n    for(let i=0;i<end-start+1;i++){\r\n        array[i+start]=auxillaryArray[i];\r\n        \r\n        auxillary.push([i+start,auxillaryArray[i]]);\r\n    }\r\n}\r\n\r\n\r\nfunction mergeSort(array,start,end){\r\n    if(start!==end){\r\n        mergeSort(array,start,start+((end-start)/2)>>0);\r\n        mergeSort(array,(start+((end-start)/2)>>0)+1,end);\r\n\r\n        merge(array,start,start+((end-start)/2)>>0,end);\r\n    }\r\n}\r\n\r\nexport function getMergeSortAnims(array){\r\n    auxillary=[];\r\n    traverse=[];\r\n    mergeSort(array,0,array.length-1);\r\n    var i=0,j=0;\r\n    var anims=[];\r\n    console.log(traverse,auxillary); \r\n    while(i<traverse.length && j<auxillary.length){\r\n        anims.push(traverse[i]);\r\n        i+=1;\r\n        anims.push(auxillary[j]);\r\n        j+=1;\r\n        anims.push(auxillary[j]);\r\n        j+=1;\r\n        anims.push(traverse[i]);\r\n        i+=1;\r\n    }\r\n    console.log(anims.length);\r\n    return anims;\r\n\r\n}","var anims=[];\r\n\r\nfunction partition(array,l,r){\r\n    const pivot=array[l];\r\n    anims.push([\"Pivot\",l]);\r\n    var i,j;\r\n    [i,j]=[l,r];\r\n    while(i<j){\r\n        do{\r\n            i++;\r\n            if (i<array.length-1 && j<array.length-1)   anims.push([\"Traverse\",i,j]);\r\n            if (i<array.length-1 && j<array.length-1)   anims.push([\"Retraverse\",i,j]);\r\n        }   while(array[i]<=pivot);\r\n        do{\r\n            j--;\r\n            if (i<array.length-1 && j<array.length-1)   anims.push([\"Traverse\",i,j]);\r\n            if (i<array.length-1 && j<array.length-1)   anims.push([\"Retraverse\",i,j]);\r\n        }   while(array[j]>pivot);\r\n        if(i<j){\r\n            [array[i],array[j]]=[array[j],array[i]];\r\n            if (i<array.length-1 && j<array.length-1) anims.push([\"Swap\",i,j]);\r\n        } \r\n    }\r\n    [array[l],array[j]]=[array[j],array[l]];\r\n    if (l<array.length-1 && j<array.length-1)    anims.push([\"Swap\",l,j]);\r\n    if (j<array.length-1)    anims.push([\"Unpivot\",j]);\r\n    return j;\r\n}\r\n\r\nfunction quicksort(array,l,r){\r\n    if(l<r){\r\n        const mid=partition(array,l,r);\r\n        quicksort(array,l,mid);\r\n        quicksort(array,mid+1,r);\r\n    }\r\n}\r\n\r\n\r\nexport function getQuickSortAnims(array){\r\n    anims=[];\r\n    array.push(Number.MAX_SAFE_INTEGER);\r\n    quicksort(array,0,array.length-1);\r\n    array.pop();\r\n    console.log(array);\r\n    return anims;\r\n}\r\n","import React from 'react';             //Import React\nimport ReactDOM from 'react-dom';     //Import ReactDOM\nimport './index.css';                 //Import CSS file\nimport Slider from 'react-input-slider';    //Import the Slider(which is downloaded by using the command 'npm install react-input-slider --save')'\nimport { Helmet } from 'react-helmet'     //Import React Helmet which is used to change the title of Web App\nimport { getBubbleSortAnims } from './sortingAlgorithms/bubbleSort';                            //Import the function from the specified directory\nimport { getBubbleSortEffecientAnims } from './sortingAlgorithms/bubbleSortEffeceint';          //Import the function from the specified directory\nimport { getInsertionSortAnims } from './sortingAlgorithms/insertionSort';                      //Import the function from the specified directory\nimport { getSelectionSortAlternateAnims } from './sortingAlgorithms/selectionSortAlternate';    //Import the function from the specified directory\nimport { getSelectionSortAnims } from './sortingAlgorithms/selectionSort';                      //Import the function from the specified directory\nimport { getMergeSortAnims } from './sortingAlgorithms/mergeSort';                              //Import the function from the specified directory\nimport { getQuickSortAnims } from './sortingAlgorithms/quickSort';                              //Import the function from the specified directory\n\n//https://seiyria.com/bootstrap-slider/   //Link for various Sliders\n\n\nclass App extends React.Component{\n\n  //Constructor of the APP which contains 'array' and 'x'\n  constructor(props){\n    super(props);\n    this.state={\n      array:[],   //This array is used to store the values(height) of the lines\n      x:10,       //This is the slider value variable which is used to take the input of ANIMATION SPEED\n      PRIMARY_COLOR : 'red',\n      SECONDARY_COLOR : 'navy',\n      TERNARY_COLOR : 'green',\n    };\n  }\n\n  //This function is is invoked immediately after a component is mounted (inserted into the tree)\n  componentDidMount(){\n    //document.title=\"Sorting Visualizer\";    //This is alternate way to change the title of Web App\n    this.resetArray();    \n  }\n\n  //This function takes parameter min and max and returns a random number in the range\n  randomNumberIn(min,max){\n\t\treturn Math.random() * (max - min) + min; \n  }\n  \n  //This function resets the value in the array(state variable)\n\tresetArray(){\n\t\tconst array=[];   //Note that we do not change the state variable array but initialise new variable and assign this to the array variable(in state)\n\t\tconst size=60;\n\t\tfor(let i=0;i<size;i++){\n\t\t\tarray.push(parseInt(this.randomNumberIn(7,500)));\n\t\t}\n\t\tthis.setState({     //Set the state to the new array\n\t\t\tarray:array,\n    });\n    this.enableButtons();   //Enable all the buttons \n  }\n\n  //This function return an array of jsx divisions(lines) with the height specified by values in the array variable of state\n  getItems(){\n    var items=[];\n    const array=this.state.array.slice();\n    for(let i=0;i<array.length;i++){\n      const ht=array[i]+\"px\";     //Giving the height corresponding to certain value\n\t\t\tlet styles = {        //Using the inline styling\n        width: '1px',\n        padding: '5px',\n        margin: '5px',\n        background: 'red',\n\t\t\t\theight: ht,\n\t\t\t};\n      items.push(<div className=\"line\" style={styles} key={i} ></div>)\n    }\n    return items;   \n  }\n\n  //This funcition disables all the buttons\n  disableButtons(){\n    const able=document.getElementsByClassName(\"able\");\n    for(let i=0;i<able.length;i++){\n      able[i].style.pointerEvents = 'none';     //Setting the pointer events to none so it becomes unclickable(not responsive)\n    }\n    const span=document.getElementById(\"instruction\");    //Display the instruction when buttons are disabled\n    span.style.color='white';\n  }\n\n  //This function enables all the buttons\n  enableButtons(){\n    const able=document.getElementsByClassName(\"able\");\n    for(let i=0;i<able.length;i++){\n      able[i].style.pointerEvents = 'auto';       //Setting the pointer events to auto so it becomes clickable(responsive)\n    }\n    const span=document.getElementById(\"instruction\");    //Hide the instruction since buttons are now enabled\n    span.style.color='black';\n  }\n\n  //This function handles animations of BubbleSort\n  bubbleSort(){\n    this.disableButtons();                    //Disable the buttons\n    const ANIMATION_SPEED=this.state.x;       //Get the animation speed from state\n    var array=this.state.array.slice();\n    const anims=getBubbleSortAnims(array);    //Get the animation from Bubble Sort file\n    var lines=document.getElementsByClassName(\"line\");    //Get all the lines from HTML(DOM)\n    const PRIMARY_COLOR=this.state.PRIMARY_COLOR;         //Getting the primary color from state\n    const SECONDARY_COLOR=this.state.SECONDARY_COLOR;     //Getting the secondary color from state\n\n    //The animations are divided into triplets.\n    //First element of this triplet tells which two elements are in comparision\n    //Second element tells whether the two elements we are comparing must be swapped or not.\n    //Third element is used to change the color of elements in comparision back to primary color    \n    for(let i=0;i<anims.length;i++){\n      if(i%3!==1){\n        const [firstBarindex,secondBarindex]=anims[i];\n        const firstBarStyle=lines[firstBarindex].style;\n        const secondBarStyle=lines[secondBarindex].style;\n        const color= i%3===0 ? SECONDARY_COLOR : PRIMARY_COLOR;      //Change the color to primary or secondary depending upon element\n        setTimeout(()=>{\n          firstBarStyle.background=color;\n          secondBarStyle.background=color;\n        },i*ANIMATION_SPEED)\n      }\n      else{\n        setTimeout(()=>{\n          const [firstBarindex,secondBarindex,flag]=anims[i];\n          const firstBarStyle=lines[firstBarindex].style;\n          const secondBarStyle=lines[secondBarindex].style;\n          if(flag){                                         //Interchange the height of the lines\n            [firstBarStyle.height,secondBarStyle.height]=[secondBarStyle.height,firstBarStyle.height];\n          }\n        },i*ANIMATION_SPEED)\n      }\n    }\n  }\n\n  //This function handles animations of BubbleSortEffecient\n  bubbleSortEffecient(){\n    this.disableButtons();                      //Disable the buttons\n    const ANIMATION_SPEED=this.state.x;         //Get the animation speed from state\n    var array=this.state.array.slice();\n    const anims=getBubbleSortEffecientAnims(array);     //Get the animation from Bubble Sort Effecient file\n    var lines=document.getElementsByClassName(\"line\");   //Get all the lines from HTML(DOM)\n    const PRIMARY_COLOR=this.state.PRIMARY_COLOR;         //Getting the primary color from state\n    const SECONDARY_COLOR=this.state.SECONDARY_COLOR;     //Getting the secondary color from state\n\n    //The animations are divided into triplets.\n    //First element of this triplet tells which two elements are in comparision\n    //Second element tells whether the two elements we are comparing must be swapped or not.\n    //Third element is used to change the color of elements in comparision back to primary color \n    for(let i=0;i<anims.length;i++){\n      if(i%3!==1){\n        const [firstBarindex,secondBarindex]=anims[i];\n        const firstBarStyle=lines[firstBarindex].style;\n        const secondBarStyle=lines[secondBarindex].style;\n        const color= i%3===0 ? SECONDARY_COLOR : PRIMARY_COLOR;      //Change the color to primary or secondary depending upon element\n        setTimeout(()=>{\n          firstBarStyle.background=color;\n          secondBarStyle.background=color;\n        },i*ANIMATION_SPEED)\n      }\n      else{\n        setTimeout(()=>{\n          const [firstBarindex,secondBarindex,flag]=anims[i];\n          const firstBarStyle=lines[firstBarindex].style;\n          const secondBarStyle=lines[secondBarindex].style;\n          if(flag){                                         //Interchange the height of the lines\n            [firstBarStyle.height,secondBarStyle.height]=[secondBarStyle.height,firstBarStyle.height];\n          }\n        },i*ANIMATION_SPEED)\n      }\n    }\n  }\n\n  //This function handles animations of InsertionSort\n  insertionSort(){\n    this.disableButtons();                                //Disable the buttons\n    const ANIMATION_SPEED=this.state.x;                   //Get the animation speed from state\n    var array=this.state.array.slice();\n    const anims=getInsertionSortAnims(array);             //Get the animation from Insertion Sort file\n    var lines=document.getElementsByClassName(\"line\");    //Get all the lines from HTML(DOM)\n    const PRIMARY_COLOR=this.state.PRIMARY_COLOR;         //Getting the primary color from state\n    const SECONDARY_COLOR=this.state.SECONDARY_COLOR;     //Getting the secondary color from state\n\n    //All elements in anims are given a string to specify what type of animation should be done\n    //Mark and Unmark are used to change the color of the lines to primary or secondary\n    //Assignidx is used to specify that height of which line should be overwritten by height of which line(by specifying the index of the lines)\n    //Assign is used to specify that height of which line(by index) should be overwritten by what value\n    for(let i=0;i<anims.length;i++){\n      const [type,val1,val2]=anims[i];\n      if(type===\"Mark\"||type===\"Unmark\"){\n        const color = type===\"Mark\" ? SECONDARY_COLOR : PRIMARY_COLOR;\n        const firstBarStyle=lines[val1].style;\n        const secondBarStyle=lines[val2].style;\n        setTimeout(()=>{\n          firstBarStyle.background=color;\n          secondBarStyle.background=color;\n        },i*ANIMATION_SPEED)\n      }\n      else if (type===\"Assignidx\"){\n        setTimeout(()=>{\n          const firstBarStyle=lines[val1].style;\n          const secondBarStyle=lines[val2].style;\n          firstBarStyle.height=secondBarStyle.height;   //Assign the height of second line to first\n        },i*ANIMATION_SPEED)\n      }\n      else{\n        setTimeout(()=>{\n          const firstBarStyle=lines[val1].style;\n          const value=val2;\n          firstBarStyle.height=value+'px';    //Assign the height of the line to the specified value\n        },i*ANIMATION_SPEED)\n      }\n    }\n  }\n\n  //This function handles animations of SelectionSortAlternate\n  selectionSortAlternate(){\n    this.disableButtons();                                //Disable the buttons\n    const ANIMATION_SPEED=this.state.x;                   //Get the animation speed from state\n    var array=this.state.array.slice();\n    const anims=getSelectionSortAlternateAnims(array);   //Get the animation from Selection Sort Alternate file\n    var lines=document.getElementsByClassName(\"line\");   //Get all the lines from HTML(DOM)\n    const PRIMARY_COLOR=this.state.PRIMARY_COLOR;         //Getting the primary color from state\n    const SECONDARY_COLOR=this.state.SECONDARY_COLOR;     //Getting the secondary color from state\n\n    //The animations are divided into triplets.\n    //First element of this triplet tells which two elements are in comparision\n    //Second element tells whether the two elements we are comparing must be swapped or not.\n    //Third element is used to change the color of elements in comparision back to primary color\n    for(let i=0;i<anims.length;i++){\n      if(i%3!==1){\n        const [firstBarindex,secondBarindex]=anims[i];\n        const firstBarStyle=lines[firstBarindex].style;\n        const secondBarStyle=lines[secondBarindex].style;\n        const color= i%3===0 ? SECONDARY_COLOR : PRIMARY_COLOR ;        //Change the color to primary or secondary depending upon element\n        setTimeout(()=>{\n          firstBarStyle.background=color;\n          secondBarStyle.background=color;\n        },i*ANIMATION_SPEED)\n      }\n      else{\n        setTimeout(()=>{\n          const [firstBarindex,secondBarindex,flag]=anims[i];\n          const firstBarStyle=lines[firstBarindex].style;\n          const secondBarStyle=lines[secondBarindex].style;\n          if(flag){                                         //Interchange the height of the lines\n            [firstBarStyle.height,secondBarStyle.height]=[secondBarStyle.height,firstBarStyle.height];\n          }\n        },i*ANIMATION_SPEED)\n      }\n    }\n  }\n\n\n  //This function handles animations of SelectionSort\n  selectionSort(){\n    this.disableButtons();                                //Disable the buttons\n    const ANIMATION_SPEED=this.state.x;                   //Get the animation speed from state\n    const array=this.state.array.slice();\n    const anims=getSelectionSortAnims(array);             //Get the animation from Selection Sort file\n    var lines=document.getElementsByClassName(\"line\");    //Get all the lines from HTML(DOM)\n    const PRIMARY_COLOR=this.state.PRIMARY_COLOR;         //Getting the primary color from state\n    const SECONDARY_COLOR=this.state.SECONDARY_COLOR;     //Getting the secondary color from state\n    const TERNARY_COLOR=this.state.TERNARY_COLOR;         //Getting the ternary color from state\n\n    //All elements in anims are given a string to specify what type of animation should be done\n    //Start is used to mark the line with ternary color(which specify the line which is to be swapped)\n    //End is used to revert the primary color\n    //Change is used to mark the line with ternary color(which is the minimum and will be swapped)\n    //Traverse and Retraverse are used to assign primary or secondary color to the two lines we are traversing\n    //Swap denotes which two lines is to be swapped(by their indices)\n    for(let i=0;i<anims.length;i++){\n      const type=anims[i][0];\n      if(type===\"Start\"){\n        const [type,current]=anims[i];\n        const currentBarStyle=lines[current].style;\n        setTimeout(()=>{\n          currentBarStyle.background=TERNARY_COLOR;       //Change the color to ternary\n        },i*ANIMATION_SPEED)\n      }\n      else if(type===\"End\"){\n        const [type,current]=anims[i];\n        const currentBarStyle=lines[current].style;\n        setTimeout(()=>{\n          currentBarStyle.background=PRIMARY_COLOR;           //Change the color back to primary\n        },i*ANIMATION_SPEED)\n      } \n      else if(type===\"Change\"){\n        const [type,prev,current]=anims[i];\n        const previousBarStyle=lines[prev].style;\n        const currentBarStyle=lines[current].style;\n        setTimeout(()=>{\n          previousBarStyle.background=PRIMARY_COLOR;          //Change the previous minimum value back to primary color\n          currentBarStyle.background=TERNARY_COLOR;       //Change the current minimum value to ternary color\n        },i*ANIMATION_SPEED)\n      }\n      else if(type===\"Traverse\"){\n        const [type,index]=anims[i];\n        const currentBarStyle=lines[index].style;\n        setTimeout(()=>{\n          currentBarStyle.background=SECONDARY_COLOR;          //Change the color to secondary of two lines traversing \n        },i*ANIMATION_SPEED)\n      }\n      else if(type===\"Retraverse\"){\n        const [type,index]=anims[i];\n        const currentBarStyle=lines[index].style;\n        setTimeout(()=>{\n          currentBarStyle.background=PRIMARY_COLOR;           //Change the color of lines back to primary color\n        },i*ANIMATION_SPEED)\n      }\n      else if(type===\"Swap\"){\n        const [type,prev,current]=anims[i];\n        const previousBarStyle=lines[prev].style;\n        const currentBarStyle=lines[current].style;\n        setTimeout(()=>{                              //Swap the lines and change their color back to primary color\n          [previousBarStyle.height,currentBarStyle.height]=[currentBarStyle.height,previousBarStyle.height];\n          [previousBarStyle.background,currentBarStyle.background]=[PRIMARY_COLOR,PRIMARY_COLOR];\n        },i*ANIMATION_SPEED)\n      }\n    }\n  }\n\n  //This function handles animations of MergeSort\n  mergeSort(){\n    this.disableButtons();                                //Disable the buttons\n    const ANIMATION_SPEED=this.state.x;                   //Get the animation speed from state\n    const array=this.state.array.slice();\n    const anims=getMergeSortAnims(array);                 //Get the animation from Merge Sort file\n    var lines=document.getElementsByClassName(\"line\");    //Get all the lines from HTML(DOM)\n    const PRIMARY_COLOR=this.state.PRIMARY_COLOR;         //Getting the primary color from state\n    const SECONDARY_COLOR=this.state.SECONDARY_COLOR;     //Getting the secondary color from state\n    \n    //Animations only denote which value(by index) should be overwritten by what value\n    for(let i=0;i<anims.length;i++){\n      if(i%4===0 || i%4===3){\n        const [x,y]=anims[i];\n        const xStyle=lines[x].style;\n        var yStyle;\n        if(y<lines.length) yStyle=lines[y].style;\n        else yStyle=lines[x].style;\n        const color= i%4===0 ?'red':'red';\n        setTimeout(()=>{\n          [xStyle.background,yStyle.background]=[color,color];\n        },i*ANIMATION_SPEED)\n      }\n      else{\n        const [x,value]=anims[i];\n        const xStyle=lines[x].style;\n        setTimeout(()=>{\n          xStyle.height=value+'px';    //Assign the height of the line to the specified value\n        },i*ANIMATION_SPEED)\n      }\n    }\n  }\n\n  //This function handles animations of QuickSort\n  quickSort(){\n    this.disableButtons();                                //Disable the buttons\n    const ANIMATION_SPEED=this.state.x;                   //Get the animation speed from state\n    var array=this.state.array.slice();\n    const anims=getQuickSortAnims(array);                   //Get the animation from Quick Sort file\n    const lines=document.getElementsByClassName(\"line\");    //Get all the lines from HTML(DOM)\n    const PRIMARY_COLOR=this.state.PRIMARY_COLOR;           //Getting the primary color from state\n    const SECONDARY_COLOR=this.state.SECONDARY_COLOR;       //Getting the secondary color from state\n    const TERNARY_COLOR=this.state.TERNARY_COLOR;           //Getting the ternary color from state\n    var firstBarStyle,secondBarStyle; \n\n    //All elements in anims are given a string to specify what type of animation should be done\n    //Traverse and Retraverse are used to assign primary or secondary color to the two lines we are traversing\n    //Pivot is used to mark the pivot element by ternary color\n    //Unpivot is used to revert the primary color of the pivot element after partitioning\n    //Swap is used to denote which two lines should be swapped(by indices)\n    for(let i=0;i<anims.length;i++){\n      if(anims[i][0]===\"Traverse\"){\n        const [type,firstBarIndex,secondBarIndex]=anims[i];\n        setTimeout(()=>{\n          [firstBarStyle,secondBarStyle]=[lines[firstBarIndex].style,lines[secondBarIndex].style];\n          [firstBarStyle.background,secondBarStyle.background]=[SECONDARY_COLOR,SECONDARY_COLOR];\n        },i*ANIMATION_SPEED)\n      }\n      else if(anims[i][0]===\"Retraverse\"){\n        const [type,firstBarIndex,secondBarIndex]=anims[i];\n        setTimeout(()=>{\n          [firstBarStyle,secondBarStyle]=[lines[firstBarIndex].style,lines[secondBarIndex].style];\n          [firstBarStyle.background,secondBarStyle.background]=[PRIMARY_COLOR,PRIMARY_COLOR];\n        },i*ANIMATION_SPEED)\n      }\n      else if(anims[i][0]===\"Pivot\"){\n        const [type,firstBarIndex]=anims[i];\n        setTimeout(()=>{\n          firstBarStyle=lines[firstBarIndex].style;\n          firstBarStyle.background=TERNARY_COLOR;\n        },i*ANIMATION_SPEED)\n      }\n      else if(anims[i][0]===\"Unpivot\"){\n        const [type,firstBarIndex]=anims[i];\n        setTimeout(()=>{\n          firstBarStyle=lines[firstBarIndex].style;\n          firstBarStyle.background=PRIMARY_COLOR;\n        },i*ANIMATION_SPEED)\n      }\n      else{\n        const [type,firstBarIndex,secondBarIndex]=anims[i];\n        setTimeout(()=>{\n          [firstBarStyle,secondBarStyle]=[lines[firstBarIndex].style,lines[secondBarIndex].style];\n          [firstBarStyle.height,secondBarStyle.height]=[secondBarStyle.height,firstBarStyle.height];\n        },i*ANIMATION_SPEED)\n      }\n    }\n  }\n\n  //This function is used to set the value of x in state to the value selected in slider\n  handleChange(value){\n    this.setState({x:value})\n  }\n\n  render(){\n    const items=this.getItems();\n    return(\n      <div>\n        <Helmet>\n          <title>Sorting Visualizer</title>\n        </Helmet>\n        <ul>\n          <li><a>Sorting Visualiser</a></li>\n          <li><a onClick={()=>this.resetArray()}>Reset Array</a></li>\n          <li className=\"able\"><a onClick={()=>this.bubbleSort()}>Bubble Sort</a></li>\n          <li className=\"able\"><a onClick={()=>this.bubbleSortEffecient()}>Bubble Sort(Effecient)</a></li>\n          <li className=\"able\"><a onClick={()=>this.insertionSort()}>Insertion Sort</a></li>\n          <li className=\"able\"><a onClick={()=>this.selectionSort()}>Selection Sort</a></li>\n          <li className=\"able\"><a onClick={()=>this.selectionSortAlternate()}>Selection Sort(Alternate)</a></li>\n          <li className=\"able\"><a onClick={()=>this.mergeSort()}>Merge Sort</a></li>\n          <li className=\"able\"><a onClick={()=>this.quickSort()}>Quick Sort</a></li>\n          <li>\n            <span>Animation speed</span>\n          </li>\n          <li className=\"able pad\">\n            <Slider\n              axis=\"x\"\n              x={this.state.x}\n              xmin={2}\n              onChange={({ x }) => this.setState({ ...this.state, x })}\n            />\n          </li>\n          <li id=\"instruction\">Reset Array for another simulation</li>\n        </ul>\n        <div className=\"flexbox\">\n          {items}\n        </div>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n)\n\n\n","export function getBubbleSortAnims(array){\r\n    var anims=[];\r\n    for(let i=0;i<array.length;i++){\r\n      for(let j=0;j<array.length-1;j++){\r\n        anims.push([j+1,j]);\r\n        var flag=false;\r\n        if(array[j+1]<array[j]){\r\n          [array[j],array[j+1]]=[array[j+1],array[j]];\r\n          flag=true;\r\n        }\r\n        anims.push([j+1,j,flag]);\r\n        anims.push([j+1,j]);\r\n      }\r\n    }\r\n    return anims;\r\n}","export function getBubbleSortEffecientAnims(array){\r\n    var anims=[];\r\n    for(let i=0;i<array.length;i++){\r\n      for(let j=0;j<array.length-1-i;j++){\r\n        anims.push([j+1,j]);\r\n        var flag=false;\r\n        if(array[j+1]<array[j]){\r\n          [array[j],array[j+1]]=[array[j+1],array[j]];\r\n          flag=true;\r\n        }\r\n        anims.push([j+1,j,flag]);\r\n        anims.push([j+1,j]);\r\n      }\r\n    }\r\n    return anims;\r\n}","export function getInsertionSortAnims(array){\r\n    var anims=[];\r\n    for(let i=0;i<array.length;i++){\r\n      var value=array[i];\r\n      var hole=i;\r\n      while(hole>0 && array[hole-1]>value){\r\n        anims.push([\"Mark\",hole,hole-1]);\r\n        anims.push([\"Assignidx\",hole,hole-1]);\r\n        anims.push([\"Unmark\",hole,hole-1]);\r\n        array[hole]=array[hole-1];\r\n        hole-=1;\r\n      }\r\n      array[hole]=value;\r\n      anims.push([\"Assign\",hole,value])\r\n    }\r\n    return anims;\r\n}","export function getSelectionSortAlternateAnims(array){\r\n    var anims=[];\r\n    for(let i=0;i<array.length;i++){\r\n        for(let j=i;j<array.length;j++){\r\n            var flag=false;\r\n            if(array[i]>array[j]){\r\n                flag=true;\r\n                [array[i],array[j]]=[array[j],array[i]];\r\n            }\r\n            anims.push([i,j]);\r\n            anims.push([i,j,flag]);\r\n            anims.push([i,j]);\r\n        }\r\n    }\r\n    return anims;\r\n}","export function getSelectionSortAnims(array){\r\n    var anims=[];\r\n    for(let i=0;i<array.length;i++){\r\n        var minidx=i;\r\n        anims.push([\"Change\",minidx,minidx]);\r\n        anims.push([\"Start\",i]);\r\n        for(let j=i+1;j<array.length;j++){\r\n            anims.push([\"Traverse\",j]);\r\n            if(array[j]<array[minidx]){\r\n                anims.push([\"Change\",minidx,j]);\r\n                if(minidx===i)    anims.push([\"Start\",i]);\r\n                minidx=j;\r\n            }\r\n            else{\r\n                anims.push([\"Retraverse\",j]);\r\n            }\r\n            \r\n        }\r\n        [array[i],array[minidx]]=[array[minidx],array[i]];\r\n        anims.push([\"Swap\",minidx,i]);\r\n        anims.push([\"End\",i]);\r\n    }\r\n    console.log(array);\r\n    return anims;\r\n}"],"sourceRoot":""}